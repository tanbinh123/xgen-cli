'use strict';

const qs = require('qs');
const mockjs = require('mockjs');


// 数据持久
let {{toUpCaseF namespace}}tableListData = {};
if (!global.{{toUpCaseF namespace}}tableListData) {
  const data = mockjs.mock({
    'data|100': [{
      'id|+1': 1,
      {{#rows}}
      {{toUpCaseF column_name}}:'@cname',
      {{/rows}}
    }],
    page: {
      total: 100,
      current: 1
    }
  });
  {{toUpCaseF namespace}}tableListData = data;
  global.{{toUpCaseF namespace}}tableListData = {{toUpCaseF namespace}}tableListData;
} else {
  {{toUpCaseF namespace}}tableListData = global.{{toUpCaseF namespace}}tableListData;
}

module.exports = {
  'GET /api/{{toUpCaseF namespace}}s' (req, res) {
    const page = qs.parse(req.query);
    const pageSize = page.pageSize || 10;
    const currentPage = page.page || 1;
    // console.log("currentPage--->"+page.page);
    let data;
    let newPage;

    let newData = {{toUpCaseF namespace}}tableListData.data.concat();

    if (page.field) {
      const d = newData.filter(function (item) {
        return item[page.field].indexOf(page.keyword) > -1;
      });


      data = d.slice((currentPage - 1) * pageSize, currentPage * pageSize);

      newPage = {
        current: currentPage * 1,
        total: d.length
      };
    } else {
      data = {{toUpCaseF namespace}}tableListData.data.slice((currentPage - 1) * pageSize, currentPage * pageSize);
      {{toUpCaseF namespace}}tableListData.page.current = currentPage * 1;
      newPage = {
        current: {{toUpCaseF namespace}}tableListData.page.current,
        total: {{toUpCaseF namespace}}tableListData.page.total
      };
      // console.log("currentPage--->"+{{toUpCaseF namespace}}tableListData.page.current);
    }

    console.log(newPage);

    setTimeout(function () {
      res.json({
        success: true,
        data,
        page: newPage
      });
    }, 500);
  },
  'POST /api/{{toUpCaseF namespace}}s' (req, res) {
    setTimeout(function () {
      const newData = qs.parse(req.body);

      newData.id = {{toUpCaseF namespace}}tableListData.data.length + 1;
      {{toUpCaseF namespace}}tableListData.data.unshift(newData);

      {{toUpCaseF namespace}}tableListData.page.total = {{toUpCaseF namespace}}tableListData.data.length;
      {{toUpCaseF namespace}}tableListData.page.current = 1;

      global.{{toUpCaseF namespace}}tableListData = {{toUpCaseF namespace}}tableListData;
      res.json({
        success: true,
        data: {{toUpCaseF namespace}}tableListData.data,
        page: {{toUpCaseF namespace}}tableListData.page
      });
    }, 500);
  },

  'DELETE /api/{{toUpCaseF namespace}}s' (req, res) {
    setTimeout(function () {
      const deleteItem = qs.parse(req.body);

      {{toUpCaseF namespace}}tableListData.data = {{toUpCaseF namespace}}tableListData.data.filter(function (item) {
        if (item.id == deleteItem.id) {
          return false;
        }
        return true;
      });

      {{toUpCaseF namespace}}tableListData.page.total = {{toUpCaseF namespace}}tableListData.data.length;

      global.{{toUpCaseF namespace}}tableListData = {{toUpCaseF namespace}}tableListData;
      res.json({
        success: true,
        data: {{toUpCaseF namespace}}tableListData.data,
        page: {{toUpCaseF namespace}}tableListData.page
      });
    }, 500);
  },

  'PUT /api/{{toUpCaseF namespace}}s' (req, res) {
    setTimeout(function () {
      const editItem = qs.parse(req.body);

      {{toUpCaseF namespace}}tableListData.data = {{toUpCaseF namespace}}tableListData.data.map(function (item) {
        if (item.id == editItem.id) {
          return editItem;
        }
        return item;
      });

      global.{{toUpCaseF namespace}}tableListData = {{toUpCaseF namespace}}tableListData;
      res.json({
        success: true,
        data: {{toUpCaseF namespace}}tableListData.data,
        page: {{toUpCaseF namespace}}tableListData.page
      });
    }, 500);
  }
};
